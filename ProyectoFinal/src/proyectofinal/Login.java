/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package proyectofinal;
import java.sql.Connection;
import java.sql.DatabaseMetaData;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import java.sql.ResultSetMetaData;
import javax.swing.JOptionPane;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Random;
import java.util.Arrays;
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.pdf.PdfWriter;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.util.logging.Level;
import java.util.logging.Logger;
import static proyectofinal.Prueba4.encontrarUsuario;
public class Login extends javax.swing.JFrame {
    static ArrayList<String> verbosIngles = new ArrayList<>();
    static ArrayList<String> verbosEspanol = new ArrayList<>();
    static ArrayList<String> verbosInglesI = new ArrayList<>();
    static ArrayList<String> verbosEspanolI = new ArrayList<>();
    static ArrayList<Usuario> usuarios = new ArrayList<>();
    static MySQL con=new MySQL();
    static Connection cn=con.conectar();
    static menuPrincipal MP;
    static registrarse Re;
    public Login() {
        initComponents();
        obtenerVerbos();
        obtenerUsuarios();
        obtenerCalificaciones();
        setLocationRelativeTo(null);
    }
    public static void LoginRegistrarse(ArrayList<Usuario> usuariosR){
        usuarios=usuariosR;
   }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel6 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        iniciarSesion = new javax.swing.JButton();
        registrarse = new javax.swing.JButton();
        salir = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        token = new javax.swing.JTextField();
        contraseña = new javax.swing.JPasswordField();
        jLabel8 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel6.setBackground(new java.awt.Color(4, 40, 62));

        jLabel6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/academia.jpg"))); // NOI18N
        jLabel6.setMaximumSize(new java.awt.Dimension(1024, 1024));
        jLabel6.setMinimumSize(new java.awt.Dimension(1024, 1024));

        jLabel3.setBackground(new java.awt.Color(92, 173, 192));
        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(92, 173, 192));
        jLabel3.setText("PROGRAMA DE AUTOAPRENDIZAJE");

        jLabel7.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(92, 173, 192));
        jLabel7.setText("DE INGLES");

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabel3)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7))
                .addContainerGap(50, Short.MAX_VALUE))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(47, 47, 47)
                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(36, 36, 36)
                .addComponent(jLabel3)
                .addGap(18, 18, 18)
                .addComponent(jLabel7)
                .addContainerGap(232, Short.MAX_VALUE))
        );

        jPanel1.setBackground(new java.awt.Color(150, 201, 210));

        iniciarSesion.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        iniciarSesion.setText("Iniciar sesión");
        iniciarSesion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                iniciarSesionActionPerformed(evt);
            }
        });

        registrarse.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        registrarse.setText("Registrarse");
        registrarse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                registrarseActionPerformed(evt);
            }
        });

        salir.setBackground(new java.awt.Color(252, 164, 181));
        salir.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        salir.setText("Salir");
        salir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                salirActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel4.setText("Token:");

        jLabel5.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jLabel5.setText("Contraseña:");

        jLabel8.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(255, 255, 255));
        jLabel8.setText("LOGIN");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(70, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(6, 6, 6)
                        .addComponent(token, javax.swing.GroupLayout.DEFAULT_SIZE, 269, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(6, 6, 6)
                        .addComponent(contraseña))
                    .addComponent(iniciarSesion)
                    .addComponent(registrarse)
                    .addComponent(salir)
                    .addComponent(jLabel8))
                .addGap(70, 70, 70))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(95, 95, 95)
                .addComponent(jLabel8)
                .addGap(48, 48, 48)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(token, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(22, 22, 22)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(contraseña, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(iniciarSesion)
                        .addGap(18, 18, 18)
                        .addComponent(registrarse)
                        .addGap(19, 19, 19)))
                .addComponent(salir)
                .addGap(148, 148, 148))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void registrarseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_registrarseActionPerformed
        Re.Registrar(usuarios);
        Re=new registrarse();
        Re.setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_registrarseActionPerformed

    private void iniciarSesionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_iniciarSesionActionPerformed
        String toke = token.getText();
        String contrasena = contraseña.getText();
        Usuario usuario = encontrarUsuario(usuarios, toke, contrasena);
        obtenerVerbosIncorrectos(usuario);
        if (usuario != null) {
            this.dispose();
            MP.menuP(verbosInglesI,verbosEspanolI,verbosIngles,verbosEspanol,usuarios,usuario);
            MP=new menuPrincipal();
            MP.setVisible(true);
            
        }
        else{
            JOptionPane.showMessageDialog(null, "Token o contraseña incorrectos. Intente nuevamente.");
        }
    }//GEN-LAST:event_iniciarSesionActionPerformed

    private void salirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_salirActionPerformed
        System.exit(0);
    }//GEN-LAST:event_salirActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Login.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Login.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Login.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Login.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Login().setVisible(true);
                
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPasswordField contraseña;
    private javax.swing.JButton iniciarSesion;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JButton registrarse;
    private javax.swing.JButton salir;
    private javax.swing.JTextField token;
    // End of variables declaration//GEN-END:variables
    public static void obtenerUsuarios() {
        String nombre, contraseña, token;
        Usuario usuarionew;
        try {
            String consulta = "SELECT nombre, contraseña, token FROM usuarios";
            Statement statement = cn.createStatement();
            ResultSet resultSet = statement.executeQuery(consulta);
            while (resultSet.next()) {
                nombre=resultSet.getString("nombre");
                contraseña=resultSet.getString("contraseña");
                token=resultSet.getString("token");
                usuarionew =new Usuario(nombre, contraseña, token);
                usuarios.add(usuarionew);
            }
            resultSet.close();
            statement.close();

            System.out.println("Listas actualizadas con los datos de la base de datos.");
        } catch (Exception ex) {
            System.out.println("Error al actualizar listas: " + ex.getMessage());
        }
    }
    public static void obtenerVerbos() {
        try {
            String consulta = "SELECT Espanol, Ingles FROM verbos";
            Statement statement = cn.createStatement();
            ResultSet resultSet = statement.executeQuery(consulta);
            while (resultSet.next()) {
                verbosEspanol.add(resultSet.getString("Espanol"));
                verbosIngles.add(resultSet.getString("Ingles"));
            }
            resultSet.close();
            statement.close();

            System.out.println("Listas actualizadas con los datos de la base de datos.");
            
        } catch (Exception ex) {
            System.out.println("Error al actualizar listas: " + ex.getMessage());
        }
    }
    public static void obtenerVerbosIncorrectos(Usuario usuario) {
        try {
            String consulta = "SELECT espanol, ingles FROM "+usuario.getToken()+"incorrecto";
            Statement statement = cn.createStatement();
            ResultSet resultSet = statement.executeQuery(consulta);
            while (resultSet.next()) {
                verbosEspanolI.add(resultSet.getString("espanol"));
                verbosInglesI.add(resultSet.getString("ingles"));
            }
            resultSet.close();
            statement.close();

            System.out.println("Listas actualizadas con los datos de la base de datos incorrectos.");
            
        } catch (Exception ex) {
            System.out.println("Error al actualizar listas: " + ex.getMessage());
        }
    }
    public static void obtenerCalificaciones() {
        try {
            String consultaTokens = "SELECT token FROM usuarios";
            Statement statementTokens = cn.createStatement();
            ResultSet resultSetTokens = statementTokens.executeQuery(consultaTokens);

            while (resultSetTokens.next()) {
                String token = resultSetTokens.getString("token");
                String contraseña="";
                String consultaCalificaciones = "SELECT preguntasRealizadas, preguntasCorrectas, porcentaje FROM " + token;
                Statement statementCalificaciones = cn.createStatement();
                ResultSet resultSetCalificaciones = statementCalificaciones.executeQuery(consultaCalificaciones);
                PreparedStatement preparedStatement = cn.prepareStatement("SELECT contraseña FROM usuarios WHERE token ='" + token + "'");
                ResultSet resultSet = preparedStatement.executeQuery();
                if (resultSet.next()) {
                    ResultSetMetaData metaData = resultSet.getMetaData();
                    contraseña=resultSet.getString(1); // Suponiendo que la columna 'dni' está en la primera posición
                }
                else{
                    continue;
                }
                Usuario usuario =encontrarUsuario(usuarios, token, contraseña);
                while (resultSetCalificaciones.next()) {
                    int preguntasRealizadas = resultSetCalificaciones.getInt("preguntasRealizadas");
                    int preguntasCorrectas = resultSetCalificaciones.getInt("preguntasCorrectas");
                    double porcentaje = resultSetCalificaciones.getDouble("porcentaje");
                    CalificacionUsuario calificacion=new CalificacionUsuario(preguntasRealizadas, preguntasCorrectas);
                    usuario.agregarCalificacion(calificacion);
                }

                resultSetCalificaciones.close();
                statementCalificaciones.close();
            }

            resultSetTokens.close();
            statementTokens.close();
        } catch (Exception ex) {
            System.out.println("No se logro caragar las calificaciones"+ex);
        }
    }
}
